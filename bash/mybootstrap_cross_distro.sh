#!/bin/bash

# Cross-distro bootstrap script v3.3 (Refactored)
# Installs standalone scripts and generates simple shell wrappers.
# Version: 3.3

set -euo pipefail

# --- Logging functions and other helpers as before ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; NC='\033[0m'
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
detect_distro() {
    local pkg_manager=""
    if command -v apt &>/dev/null; then pkg_manager="apt";
    elif command -v dnf &>/dev/null; then pkg_manager="dnf";
    elif command -v pacman &>/dev/null; then pkg_manager="pacman";
    elif command -v zypper &>/dev/null; then pkg_manager="zypper";
    else log_error "Unsupported package manager." && exit 1; fi
    echo "$pkg_manager"
}
# --- (All other helper functions like setup_additional_repos, install_aur_helper, etc. remain the same) ---

main() {
    log_info "Bootstrap v3.3 (Refactored) starting..."
    local pkg_manager
    pkg_manager=$(detect_distro)
    log_info "Detected package manager: $pkg_manager"

    # --- (Package definition and installation logic as finalized in v3.2) ---
    # This includes the python_build_deps for pyenv.

    # --- Download and install standalone scripts ---
    log_info "Installing standalone scripts to ~/.local/bin..."
    local bin_dir="${HOME}/.local/bin"
    mkdir -p "$bin_dir"
    local scripts_url_base="https://raw.githubusercontent.com/jspractice-1480122229/didactic-waddle/master/scripts"
    local scripts=("bmedia" "bimg" "bsys" "bfileops" "butils" "bfinder" "barchive")

    for script in "${scripts[@]}"; do
        log_info "Downloading ${script}..."
        if wget -q "${scripts_url_base}/${script}" -O "${bin_dir}/${script}"; then
            chmod +x "${bin_dir}/${script}"
        else
            log_warn "Failed to download ${script}"
        fi
    done

    # --- Generate all shell configs locally ---

    # Timestamped backup of .bashrc
    if [[ -f "${HOME}/.bashrc" ]]; then
        local timestamp; timestamp=$(date +%Y%m%d_%H%M%S)
        log_info "Backing up existing .bashrc to .bashrc.backup_${timestamp}"
        mv "${HOME}/.bashrc" "${HOME}/.bashrc.backup_${timestamp}"
    fi

    # Generate .bashrc
    log_info "Generating new .bashrc..."
    cat > "${HOME}/.bashrc" << 'EOL'
# ~/.bashrc: generated by bootstrap script.
export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$HOME/.pyenv/bin:$PATH"
# Source aliases and functions
if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases; fi
if [ -f ~/.bash_functions ]; then . ~/.bash_functions; fi
# Source personal configs if they exist
if [ -f ~/.bash_personal ]; then . ~/.bash_personal; fi
# Pyenv init
if command -v pyenv 1>/dev/null 2>&1; then eval "$(pyenv init -)"; fi
# FNM init
if command -v fnm 1>/dev/null 2>&1; then eval "$(fnm env --use-on-cd)"; fi
EOL

    # Generate .bash_aliases (now very simple)
    log_info "Generating new .bash_aliases..."
    cat > "${HOME}/.bash_aliases" << 'EOL'
# ~/.bash_aliases: generated by bootstrap script.
alias rm='rm -iv'
alias cp='cp -iv'
alias mv='mv -iv'
alias ..='cd ..'
alias ...='cd ../..'
if command -v eza &>/dev/null; then
    alias ls='eza --icons'
    alias ll='eza -l --icons'
    alias la='eza -la --icons'
else
    alias ls='ls -F --color=auto'
    alias ll='ls -alF --color=auto'
fi
EOL

    # Generate .bash_functions (now just wrappers and installers)
    log_info "Generating new .bash_functions..."
    cat > "${HOME}/.bash_functions" << 'EOL'
# ~/.bash_functions: generated by bootstrap script.
# Simple wrappers for standalone scripts
media() { bmedia "$@"; }
img() { bimg "$@"; }
sys() { bsys "$@"; }
fileops() { bfileops "$@"; }
utils() { butils "$@"; }
finder() { bfinder "$@"; }
archive() { barchive "$@"; }

# Installer functions remain here as they are not general-purpose tools
install_vim() {
    # ... (full cross-distro vim install logic as finalized in v3.2) ...
}
install_ycm() {
    # ... (full cross-distro ycm install logic as finalized in v3.2) ...
}
EOL

    # Generate Fish config and functions
    log_info "Generating Fish shell configuration..."
    local fish_config_dir="${HOME}/.config/fish"
    mkdir -p "$fish_config_dir/conf.d" "$fish_config_dir/functions"

    cat > "$fish_config_dir/config.fish" << 'EOL'
# config.fish: generated by bootstrap script
set -gx PATH $HOME/.local/bin $HOME/.cargo/bin $PATH
if command -v starship >/dev/null; starship init fish | source; end
if command -v pyenv >/dev/null; pyenv init - | source; end
if command -v fnm >/dev/null; fnm env --use-on-cd | source; end
if command -v zoxide >/dev/null; zoxide init fish | source; end
# Source personal configs if they exist
if test -f ~/.config/fish/config.personal.fish; source ~/.config/fish/config.personal.fish; end
EOL

    cat > "$fish_config_dir/conf.d/aliases.fish" << 'EOL'
# aliases.fish: generated by bootstrap script
alias rm 'rm -iv'
alias cp 'cp -iv'
alias mv 'mv -iv'
alias .. 'cd ..'
alias ... 'cd ../..'
if command -v eza >/dev/null
    alias ls 'eza --icons'
    alias ll 'eza -l --icons'
    alias la 'eza -la --icons'
else
    alias ls 'ls -F --color=auto'
    alias ll 'ls -alF --color=auto'
end
EOL

    cat > "$fish_config_dir/functions/wrappers.fish" << 'EOL'
# Fish function wrappers for standalone scripts
function media; bmedia $argv; end
function img; bimg $argv; end
function sys; bsys $argv; end
function fileops; bfileops $argv; end
function utils; butils $argv; end
function finder; bfinder $argv; end
function archive; barchive $argv; end
EOL

    # --- (The rest of the main bootstrap script logic: pyenv, fnm, rust, etc. as finalized in v3.2) ---

    log_info "Bootstrap refactoring complete!"
    log_info "Shell configurations are now simple wrappers for standalone scripts."
    log_info "Please run 'source ~/.bashrc' or restart your terminal."
}

# --- (Call main function) ---
main "$@"
